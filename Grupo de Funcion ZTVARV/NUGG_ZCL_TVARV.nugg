<?xml version="1.0" encoding="utf-8"?>
<nugget name="ZCL_TVARV">
 <CLAS CLSNAME="ZCL_TVARV" VERSION="1" LANGU="E" DESCRIPT="Constant Managment" CATEGORY="00" EXPOSURE="2" STATE="1" RELEASE="0" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" CLSBCCAT="00" DURATION_TYPE="0 " RISK_LEVEL="0 " ZSAPLINK_PLUGIN_MAJOR_VERSION="0 " ZSAPLINK_PLUGIN_MINOR_VERSION="1 " ZSAPLINK_PLUGIN_BUILD_VERSION="0 " ZSAPLINK_PLUGIN_INFO1="ZSAPLINK_CLASS is part of the main ZSAPLINK project --&gt; This plugin found there instead of ZSAPLINK_PLUGINS projects" ZSAPLINK_PLUGIN_INFO2="SAPLINK homepage: https://www.assembla.com/spaces/saplink/wiki" ZSAPLINK_PLUGIN_INFO3="Download from https://www.assembla.com/code/saplink/subversion/nodes" ZSAPLINK_PLUGIN_INFO4="and navigate to:  trunk -&gt; core -&gt; ZSAPLINK -&gt; CLAS -&gt; ZSAPLINK_CLASS.slnk">
  <localImplementation>*&quot;* use this source file for the definition and implementation of
*&quot;* local helper classes, interface definitions and type
*&quot;* declarations</localImplementation>
  <localTypes>*&quot;* use this source file for any type of declarations (class
*&quot;* definitions, interfaces or type declarations) you need for
*&quot;* components in the private section</localTypes>
  <localMacros>*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</localMacros>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE" VERSION="1" LANGU="E" DESCRIPT="Get value of TVARVC" EXPOSURE="2" STATE="1" EDITORDER="1 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="ABAP: Name of Variant Variable" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TVARVC-NAME"/>
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE" SCONAME="R_VALUE" VERSION="1" LANGU="E" DESCRIPT="ABAP/4: Selection value (LOW or HIGH value, external format)" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TVARVC-LOW"/>
   <exception CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE" SCONAME="EX_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Not Found" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_value.
  SELECT SINGLE low
    INTO r_value
    FROM tvarvc
    WHERE name = i_name AND TYPE = &apos;P&apos;.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE e003(ztvarv) WITH  i_name RAISING ex_not_found.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_000" VERSION="1" LANGU="E" DESCRIPT="Get value of TVARV (not released)" EXPOSURE="2" STATE="1" EDITORDER="4 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_VALUE_000.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" VERSION="1" LANGU="E" DESCRIPT="Get value by seprator of TVARVC" EXPOSURE="2" STATE="1" EDITORDER="2 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="ABAP/4: Selection value (LOW or HIGH value, external format)" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TVARVC-NAME"/>
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" SCONAME="I_SEP" VERSION="1" LANGU="E" DESCRIPT="Character Field Length 1" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="CHAR01" PARVALUE="&apos;#&apos;"/>
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" SCONAME="I_PARAM_NUM" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="3 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="I" PARVALUE="1"/>
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" SCONAME="R_VALUE" VERSION="1" LANGU="E" DESCRIPT="Table of variables in selection criteria" CMPTYPE="1" MTDTYPE="0" EDITORDER="4 " DISPID="0 " PARDECLTYP="3" PARPASSTYP="0" TYPTYPE="1" TYPE="TVARV_VAL"/>
   <exception CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP" SCONAME="EX_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Not found" MTDTYPE="0" EDITORDER="1 "/>
   <source>METHOD get_value_by_sep.
  DATA: lt_value TYPE STANDARD TABLE OF  tvarv_val,
        lv_value TYPE tvarv_val.

*** Seleccioar seg√∫n cada valor
  SELECT SINGLE low
    INTO lv_value
    FROM tvarvc
    WHERE name = i_name AND type = &apos;P&apos;.

  IF sy-subrc = 0.
*** Separar los valores individuales
    SPLIT lv_value AT i_sep INTO TABLE lt_value.
    IF sy-subrc = 0.
      READ TABLE lt_value INTO lv_value INDEX i_param_num.
      IF sy-subrc =  0.
        r_value  = lv_value.
      ELSE.
        MESSAGE e002(ztvarv) WITH i_name i_sep i_param_num RAISING  ex_not_found.
      ENDIF.
    ELSE.
      MESSAGE e001(ztvarv) WITH i_name i_sep RAISING  ex_not_found.
    ENDIF.

  ELSE.
    MESSAGE e003(zstvarv) WITH  i_name RAISING ex_not_found.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_BY_SEP_000" VERSION="1" LANGU="E" DESCRIPT="Get value by seprator of TVARV (not released)" EXPOSURE="2" STATE="1" EDITORDER="5 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_VALUE_BY_SEP_000.
endmethod.</source>
  </method>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE" VERSION="1" LANGU="E" DESCRIPT="Get values TVARVC return in Range" EXPOSURE="2" STATE="1" EDITORDER="3 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE" SCONAME="I_NAME" VERSION="1" LANGU="E" DESCRIPT="ABAP: Name of Variant Variable" CMPTYPE="1" MTDTYPE="0" EDITORDER="1 " DISPID="0 " PARDECLTYP="0" PARPASSTYP="1" TYPTYPE="1" TYPE="TVARV-NAME"/>
   <parameter CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE" SCONAME="E_RANGE" VERSION="1" LANGU="E" CMPTYPE="1" MTDTYPE="0" EDITORDER="2 " DISPID="0 " PARDECLTYP="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ANY"/>
   <exception CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE" SCONAME="EX_NOT_FOUND" VERSION="1" LANGU="E" DESCRIPT="Not Found" MTDTYPE="0" EDITORDER="1 "/>
   <exception CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE" SCONAME="EX_FS_ERROR" VERSION="1" LANGU="E" DESCRIPT="Error in Field Symbol Assign" MTDTYPE="0" EDITORDER="2 "/>
   <source>METHOD get_value_in_range.
  DATA: lt_tvarvc TYPE STANDARD TABLE OF tvarvc,
        lw_tvarvc TYPE  tvarvc,
        vl_char_low(18) VALUE &apos;OL_W_RANGE-&gt;LOW&apos;,
        vl_char_high(18) VALUE &apos;OL_W_RANGE-&gt;HIGH&apos;,
        vl_char_sign(18) VALUE &apos;OL_W_RANGE-&gt;SIGN&apos;,
        vl_char_option(18) VALUE &apos;OL_W_RANGE-&gt;OPTION&apos;,
        ol_t_range TYPE REF TO data,
        ol_w_range TYPE REF TO data.
  FIELD-SYMBOLS: &lt;fsl_t_range&gt; TYPE ANY TABLE,
  &lt;fsl_w_range&gt; TYPE any,
  &lt;fsl_field&gt; TYPE any.

*** Select Data
  SELECT  *
    INTO TABLE lt_tvarvc
    FROM tvarvc
    WHERE name = i_name AND type = &apos;S&apos;.

  IF sy-subrc = 0.
*** Create Range dynamically
    CREATE DATA ol_t_range LIKE e_range.

    ASSIGN ol_t_range-&gt;* TO &lt;fsl_t_range&gt;.

    IF sy-subrc &lt;&gt; 0.
      MESSAGE e004(ztvarv) WITH &apos;ol_t_range-&gt;*&apos; &apos;GET_VALUE_IN_RANGE&apos; .
    ENDIF.


    CREATE DATA ol_w_range LIKE LINE OF &lt;fsl_t_range&gt;.
    LOOP AT lt_tvarvc INTO lw_tvarvc.
*** SIGN
      ASSIGN (vl_char_sign) TO &lt;fsl_field&gt;.
      IF sy-subrc = 0.
        &lt;fsl_field&gt; = lw_tvarvc-sign.
      ELSE.
        MESSAGE e004(ztvarv) WITH &apos;&lt;fsl_field&gt;&apos; &apos;GET_VALUE_IN_RANGE&apos; .
      ENDIF.
*** OPTI
      ASSIGN (vl_char_option) TO &lt;fsl_field&gt;.
      IF sy-subrc = 0.
        IF lw_tvarvc-opti IS INITIAL.
          lw_tvarvc-opti = &apos;EQ&apos;.&quot;Especial case .
        ENDIF.
        &lt;fsl_field&gt; = lw_tvarvc-opti.
      ELSE.
        MESSAGE e004(ztvarv) WITH &apos;&lt;fsl_field&gt;&apos; &apos;GET_VALUE_IN_RANGE&apos; .
      ENDIF.
*** LOW
      ASSIGN (vl_char_low) TO &lt;fsl_field&gt;.
      IF sy-subrc = 0.
        &lt;fsl_field&gt; = lw_tvarvc-low.
      ELSE.
        MESSAGE e004(ztvarv) WITH &apos;&lt;fsl_field&gt;&apos; &apos;GET_VALUE_IN_RANGE&apos; .
      ENDIF.

*** HIGH
      ASSIGN (vl_char_high) TO &lt;fsl_field&gt;.
      IF sy-subrc = 0.
        &lt;fsl_field&gt; = lw_tvarvc-high.
      ELSE.
        MESSAGE e004(ztvarv) WITH &apos;&lt;fsl_field&gt;&apos; &apos;GET_VALUE_IN_RANGE&apos; .
      ENDIF.

      ASSIGN ol_w_range-&gt;* TO &lt;fsl_w_range&gt;.
      IF sy-subrc &lt;&gt; 0.
        MESSAGE e004(ztvarv) WITH &apos;&lt;fsl_w_range&gt;&apos; &apos;GET_VALUE_IN_RANGE&apos; .
      ENDIF.

      INSERT &lt;fsl_w_range&gt; INTO TABLE &lt;fsl_t_range&gt;.
    ENDLOOP.

    e_range = &lt;fsl_t_range&gt;.
  ELSE.
    MESSAGE e003(ztvarv) WITH i_name RAISING ex_not_found.
  ENDIF.
ENDMETHOD.</source>
  </method>
  <method CLSNAME="ZCL_TVARV" CMPNAME="GET_VALUE_IN_RANGE_000" VERSION="1" LANGU="E" DESCRIPT="Get values TVARV return in Range (not released)" EXPOSURE="2" STATE="1" EDITORDER="6 " DISPID="0 " MTDTYPE="0" MTDDECLTYP="1" BCMTDCAT="00" BCMTDSYN="0">
   <source>method GET_VALUE_IN_RANGE_000.
endmethod.</source>
  </method>
 </CLAS>
</nugget>
